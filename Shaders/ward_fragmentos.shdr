{
  "vertexSource": "#version 300 es\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 normalMatrix;\nuniform mat4 modelMatrix;\n\nuniform vec3 posL;\n\nin vec3 vertexNormal;\nin vec3 vertexPosition;\nout vec3 vi;\nout vec3 vn;\nout vec3 vr;\n\nvoid main() {\n    vec3 p = vec3(viewMatrix * modelMatrix *vec4(vertexPosition, 1));\n    vi = vec3(viewMatrix * vec4(posL,1)); \n    vi = vi - p;\n    vr = -p;\n    vn = vec3(normalMatrix*vec4(vertexNormal,1));\n    vi = normalize(vi);\n    vn = normalize(vn);\n    vr = normalize(vr);\n    \n    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(vertexPosition, 1);\n}",
  "fragmentSource": "#version 300 es\nprecision mediump float;\n\nuniform vec3 pd;\nuniform vec3 ps;\nuniform float alfa;\n\nin vec3 vi;\nin vec3 vn;\nin vec3 vr;\nout vec3 fragmentColor;\n\nvoid main() {\n    vec3 vni = normalize(vi);\n    vec3 vnn = normalize(vn);\n    vec3 vnr = normalize(vr);\n    vec3 vnh = normalize(vr+vi);\n    \n    float cos_ti = dot(vnn,vni);\n    float cos_tr = dot(vnn,vnr);\n    \n    float tita_h = acos(dot(vnh,vnn));\n    \n    float PI = 3.14159;\n    vec3 color = pd/PI; \n    \n    if ( (cos_ti > 0.001) && (cos_tr > 0.001) ) {\n        float a2 = alfa*alfa;\n        float tangente = tan(tita_h/a2);\n        float divisor = 4.0*PI*a2;\n        float exp_aux = exp(-tangente*tangente)/divisor;\n        color += exp_aux * ps/sqrt(cos_ti*cos_tr);\n    }\n    \n    fragmentColor = color;\n}",
  "model": "sphere",
  "uniforms": [
    {
      "name": "posL",
      "type": "vec3",
      "value": [
        1,
        4,
        1
      ]
    },
    {
      "name": "pd",
      "type": "vec3",
      "value": [
        0.3499999940395355,
        0.3100000023841858,
        0.09000000357627869
      ]
    },
    {
      "name": "ps",
      "type": "vec3",
      "value": [
        0.800000011920929,
        0.7200000286102295,
        0.20999999344348907
      ]
    },
    {
      "name": "alfa",
      "type": "float",
      "value": 0.8
    }
  ]
}