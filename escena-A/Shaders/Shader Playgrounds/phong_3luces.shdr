{
  "vertexSource": "#version 300 es\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 normalMatrix;\nuniform mat4 modelMatrix;\n\nuniform vec3 ppuntual;\nuniform vec3 pspot;\n\nin vec3 vertexNormal;\nin vec3 vertexPosition;\nout vec3 normal;\nout vec3 Lpuntual;\nout vec3 ojo;\nout vec3 Lspot;\nout vec3 LEspot;\n\nvoid main() {\n    vec3 vPE = vec3(viewMatrix * modelMatrix * vec4(vertexPosition, 1));\n    vec3 LE = vec3(viewMatrix * vec4(ppuntual,1));\n    Lpuntual = normalize(vec3(LE-vPE));\n    normal = normalize(vec3(normalMatrix*vec4(vertexNormal,1)));\n    ojo = normalize(-vPE);  // distancia entre la posicion del ojo (0,0,0) y un vertice del objeto\n    \n    \n    \n   \n    LEspot = vec3(viewMatrix * vec4(pspot,1));\n    Lspot = normalize( vec3(modelMatrix * vec4(vertexPosition, 1)) - pspot );\n    LEspot = normalize(vec3(LEspot-vPE));\n    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(vertexPosition, 1);\n}",
  "fragmentSource": "#version 300 es\nprecision mediump float;\n\nuniform vec3 ia;\n\nuniform vec3 ka;\nuniform vec3 kd;\nuniform vec3 ks;\nuniform float n;\n\nuniform vec3 ipuntual;\nuniform float fapuntual;\n\nuniform vec3 dspot;\nuniform vec3 ispot;\nuniform float angulo;\nuniform float faspot;\n\nuniform vec3 ddireccional;\nuniform vec3 idireccional;\nuniform float fadireccional;\n\nin vec3 Lspot;\nin vec3 LEspot;\nin vec3 normal;\nin vec3 Lpuntual;\nin vec3 ojo;\n\nout vec4 fragmentColor;\n\nvoid main() {\n    float FP = 1.0/3.0;\n    vec3 N = normalize(normal);\n    vec3 L = normalize(Lpuntual);\n    vec3 V = normalize(ojo);\n    vec3 H = normalize(L+V);\n    float NL = max(dot(N,L),0.0); // intensidad de luz difusa\n    float NHn = pow(max(dot(N,H),0.0),n);// intensidad de luz especular\n    vec3 luzpuntual = fapuntual*ipuntual*(kd*NL + ks*NHn);\n\n    \n    vec3 Ldir = normalize(-ddireccional);\n\tNL = max(dot(N,Ldir),0.0);\n    H = normalize(Ldir+V);\n    NHn  = pow(max(dot(N,H),0.0),n);\n   \tvec3 luzdireccional =  fadireccional*idireccional*( kd*NL + ks*NHn );\n    \n    \n    vec3 Dspot = normalize(dspot);\n    vec3 vL = normalize(Lspot);\n    L = normalize(LEspot);   \n    H = normalize(L+V);\n    NL = max(dot(N,L),0.0);\n    NHn  = pow(max(dot(N,H),0.0),n);\n    vec3 luzspot = vec3(0,0,0);\n     if ( angulo == 0.0 || dot(vL,Dspot) > angulo )\n         luzspot += faspot*ispot*(kd*NL+ks*NHn);\n    \n    vec3 color =  ia*ka + FP*(luzpuntual + luzspot + luzdireccional) ;\n\n    fragmentColor = vec4( color ,1);\n  \n}",
  "model": "cube",
  "uniforms": []
}